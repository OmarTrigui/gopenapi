// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
	strfmt "github.com/go-openapi/strfmt"
	swag "github.com/go-openapi/swag"
)

// GetRandomStringHandlerFunc turns a function with the right signature into a get random string handler
type GetRandomStringHandlerFunc func(GetRandomStringParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRandomStringHandlerFunc) Handle(params GetRandomStringParams) middleware.Responder {
	return fn(params)
}

// GetRandomStringHandler interface for that can handle valid get random string params
type GetRandomStringHandler interface {
	Handle(GetRandomStringParams) middleware.Responder
}

// NewGetRandomString creates a new http.Handler for the get random string operation
func NewGetRandomString(ctx *middleware.Context, handler GetRandomStringHandler) *GetRandomString {
	return &GetRandomString{Context: ctx, Handler: handler}
}

/*GetRandomString swagger:route GET /random/string getRandomString

Returns a random string with a length between 0 and 500 !

*/
type GetRandomString struct {
	Context *middleware.Context
	Handler GetRandomStringHandler
}

func (o *GetRandomString) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRandomStringParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetRandomStringOKBody get random string o k body
// swagger:model GetRandomStringOKBody
type GetRandomStringOKBody struct {

	// Randomly generated string
	Result string `json:"result,omitempty"`
}

// Validate validates this get random string o k body
func (o *GetRandomStringOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRandomStringOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRandomStringOKBody) UnmarshalBinary(b []byte) error {
	var res GetRandomStringOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
