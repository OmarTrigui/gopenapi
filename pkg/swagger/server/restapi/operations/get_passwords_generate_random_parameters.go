// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPasswordsGenerateRandomParams creates a new GetPasswordsGenerateRandomParams object
// no default values defined in spec.
func NewGetPasswordsGenerateRandomParams() GetPasswordsGenerateRandomParams {

	return GetPasswordsGenerateRandomParams{}
}

// GetPasswordsGenerateRandomParams contains all the bound params for the get passwords generate random operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetPasswordsGenerateRandom
type GetPasswordsGenerateRandomParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The length of the requested string.
	  Required: true
	  Maximum: 500
	  Minimum: 0
	  In: query
	*/
	Length int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetPasswordsGenerateRandomParams() beforehand.
func (o *GetPasswordsGenerateRandomParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qLength, qhkLength, _ := qs.GetOK("length")
	if err := o.bindLength(qLength, qhkLength, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindLength binds and validates parameter Length from query.
func (o *GetPasswordsGenerateRandomParams) bindLength(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("length", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("length", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("length", "query", "int64", raw)
	}
	o.Length = value

	if err := o.validateLength(formats); err != nil {
		return err
	}

	return nil
}

// validateLength carries on validations for parameter Length
func (o *GetPasswordsGenerateRandomParams) validateLength(formats strfmt.Registry) error {

	if err := validate.MinimumInt("length", "query", int64(o.Length), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length", "query", int64(o.Length), 500, false); err != nil {
		return err
	}

	return nil
}
